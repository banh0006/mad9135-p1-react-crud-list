{"version":3,"sources":["logo.svg","AppHeader.js","AddAnimal.js","EditAnimalForm.js","AnimalCard.js","Animals.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","Navbar","color","dark","to","activeClassName","id","NavbarBrand","style","Nav","className","navbar","NavItem","NavLink","React","Component","AddAnimal","props","handleInputChange","ev","target","value","type","checked","name","setState","state","family","class","imageLink","handleFormSubmit","bind","event","preventDefault","newAnimal","cuid","this","onSubmit","Container","Row","Form","FormGroup","Label","for","sm","Col","Input","onChange","Button","width","EditAnimalForm","handleCancelClick","collapseID","document","querySelector","click","handleSaveClick","edittedAnimal","newName","newFamily","newClass","newImageLink","console","log","editFunction","oldAnimalInfo","targetAnimal","row","onClick","AnimalCard","xs","src","animal","alt","deleteFunction","UncontrolledCollapse","toggler","key","saveChange","Animals","animals","index","findIndex","localStorage","setItem","animalListKey","JSON","stringify","deleteAnimal","animalList","filter","animalCards","length","map","Fragment","App","ANIMAL_LIST_KEY","addItem","item","animalListFromLocal","getItem","parse","initializeData","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23523e47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { NavLink as NavRouteLink} from 'react-router-dom'\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n} from 'reactstrap';\n\nclass AppHeader extends React.Component {\n    render() {\n        return (\n            <Navbar color=\"dark\" dark >\n                <NavRouteLink to=\"/\" activeClassName=\"selected\" id=\"home-link\">\n                    <NavbarBrand style={{color:\"#fff\"}}>Animals Explorer</NavbarBrand>\n                </NavRouteLink>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <NavRouteLink to=\"/add\" activeClassName=\"selected\" id=\"add-link\">\n                            <NavLink>Add New Animal</NavLink>\n                        </NavRouteLink>\n                    </NavItem>\n                </Nav>\n            </Navbar>\n\n            // <nav>\n            //     <NavRouteLink to=\"/\" activeClassName=\"selected\" id=\"home-link\">Animals Explorer</NavRouteLink>\n            //     <NavRouteLink to=\"/add\" activeClassName=\"selected\" id=\"add-link\">Add New Animal</NavRouteLink>\n            // </nav>\n        );\n    }\n}\n\nexport default AppHeader","import React from 'react'\nimport cuid from 'cuid'\nimport {Button, Col, Form, FormGroup, Label, Input, Container, Row} from 'reactstrap';\n\n\nclass AddAnimal extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            family: \"\",\n            class: \"\",\n            imageLink: \"\"\n        }\n        this.handleFormSubmit = this.handleFormSubmit.bind(this)\n    }\n    handleFormSubmit(event) {\n        event.preventDefault()\n        let id = cuid()\n        const newAnimal = {\n            id: id,\n            name: this.state.name,\n            family: this.state.family,\n            class: this.state.class,\n            imageLink: this.state.imageLink\n        }\n\n       this.props.onSubmit(newAnimal)\n    }\n\n    handleInputChange = (ev) => {\n        const target = ev.target\n        const value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n\n        this.setState({\n            [name]: value\n        })\n    }\n    \n    render () {\n        return (\n            <Container>\n                <Row className=\"justify-content-md-center\"><h1 className=\"add-animal-title\">Add new animal</h1></Row>\n                <Form onSubmit={this.handleFormSubmit}>\n                    <FormGroup className=\"animalName\">\n                        <Label for=\"name\" sm={2}>Animal Name</Label>\n                        <Col sm={10}>\n                                <Input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleInputChange} />\n                            </Col>\n                    </FormGroup>\n                    <FormGroup className=\"animalFamily\">\n                        <Label for=\"family\" sm={2}>Animal Family</Label>\n                        <Col sm={10}>\n                                <Input type=\"text\" name=\"family\" value={this.state.family} onChange={this.handleInputChange} />\n                            </Col>\n                    </FormGroup>\n                    <FormGroup className=\"animalClass\">\n                        <Label for=\"class\" sm={2}>Animal Class</Label>\n                        <Col sm={10}>\n                                <Input type=\"text\" name=\"class\" value={this.state.class} onChange={this.handleInputChange} />\n                            </Col>\n                    </FormGroup>\n                    <FormGroup className=\"animalImageLink\">\n                        <Label for=\"imageLink\" sm={2}>Animal Image Link</Label>\n                        <Col sm={10}>\n                                <Input type=\"text\" name=\"imageLink\" value={this.state.imageLink} onChange={this.handleInputChange} />\n                            </Col>\n                    </FormGroup>\n                    <FormGroup className=\"submitButton\">\n                            <Col sm=\"2\">\n                                <Button color=\"primary\" type=\"submit\" style={{width: \"100%\"}}>Add to list</Button>\n                            </Col>\n                    </FormGroup>\n                </Form>\n           </Container>\n        );\n    }\n}\n\nexport default AddAnimal","import React from 'react'\nimport {Button, Col, Form, FormGroup, Label, Input} from 'reactstrap';\n\nclass EditAnimalForm extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            oldAnimalInfo: {},\n            newName: \"\",\n            newFamily: \"\",\n            newClass: \"\",\n            newImageLink: \"\"\n        }\n    }\n\n    componentDidMount() {\n        this.setState({oldAnimalInfo: this.props.targetAnimal})\n        this.setState({newName: this.props.targetAnimal.name})\n        this.setState({newFamily: this.props.targetAnimal.family})\n        this.setState({newClass: this.props.targetAnimal.class})\n        this.setState({newImageLink: this.props.targetAnimal.imageLink})\n    }\n\n    handleInputChange = (ev) => {\n        const target = ev.target\n        const value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleCancelClick = (ev) => {\n        let collapseID = ev.target.id\n        let collapseButton = document.querySelector(`button#${collapseID}.editButton`)\n        collapseButton.click()\n    }\n\n    handleSaveClick = (ev) => {\n        ev.preventDefault()\n        let edittedAnimal = {\n            id: ev.target.id,\n            name: this.state.newName,\n            family: this.state.newFamily,\n            class: this.state.newClass,\n            imageLink: this.state.newImageLink\n        }\n        console.log(edittedAnimal)\n        this.props.editFunction(edittedAnimal)\n\n    }\n\n    render() {\n        return(\n            <Form>\n                <FormGroup row>\n                    <Label for=\"animalName\" sm={2}>Animal Name</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name='newName' id=\"animalName\" value={this.state.newName} onChange={this.handleInputChange} />\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"animalFamily\" sm={2}>Animal Family</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name='newFamily' id=\"animalFamily\" value={this.state.newFamily} onChange={this.handleInputChange}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"animalClass\" sm={2}>Animal Class</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name='newClass' id=\"animalClass\" value={this.state.newClass} onChange={this.handleInputChange}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"animalImageLink\" sm={2}>Animal Image Link</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name='newImageLink' id=\"animalImageLink\" value={this.state.newImageLink} onChange={this.handleInputChange}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Col sm=\"8\"></Col>\n                    <Col sm=\"2\">\n                        <Button color=\"primary\" type=\"submit\" id={this.state.oldAnimalInfo.id} onClick={this.handleSaveClick} className=\"save-change\">Save</Button>\n                    </Col>\n                    <Col sm=\"2\">\n                        <Button color=\"secondary\" className='cancel' id={`toggler${this.state.oldAnimalInfo.id}`} onClick={this.handleCancelClick}>Cancel</Button>\n                    </Col>\n                </FormGroup>\n            </Form>\n        )\n    }\n}\n\nexport default EditAnimalForm","import React from 'react'\nimport './AnimalCard.css'\nimport { UncontrolledCollapse, Button, Container, Row, Col} from 'reactstrap';\nimport EditAnimalForm from './EditAnimalForm'\n\nfunction AnimalCard(props) {\n\n    const handleSaveClick = (ev) => {\n\n        console.log(ev.target.id)\n    }\n\n    return (\n        <Container className=\"animal-row\">\n            <Row className=\"animal-card\" >\n                <Col xs=\"3\" className=\"animal-image\">\n                    <img src={props.animal.imageLink} alt=\"Animal\"/>\n                </Col>\n                <Col xs=\"6\"className=\"animal-info\">\n                    <h2 className=\"animal-name\">{props.animal.name}</h2>\n                    <h4 className='animal-family'>Family: {props.animal.family}</h4>\n                    <h4 className='animal-class'>Class: {props.animal.class}</h4>\n                </Col>\n                <Col xs=\"2\" className=\"control\">\n                    <Button color=\"primary\" className='editButton' id={`toggler${props.animal.id}`} onClick={() => props.editFunction(props.animal)}>Edit</Button>\n                    <Button color=\"secondary\" className=\"delete\" onClick={() => props.deleteFunction(props.animal)}>Delete</Button>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Col xs=\"10\">\n                    <UncontrolledCollapse toggler={`toggler${props.animal.id}`}>\n                        <EditAnimalForm\n                            key={props.animal.id} \n                            targetAnimal={props.animal} \n                            saveChange = {handleSaveClick}\n                            editFunction = {props.editFunction}\n                        />\n                    </UncontrolledCollapse>\n                </Col>\n            </Row>\n            \n        </Container>\n    )\n}\nexport default AnimalCard","import React from 'react'\nimport AnimalCard from './AnimalCard'\nimport {Container, Row} from 'reactstrap';\n\nclass Animals extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            animals: []\n        }\n\n        this.deleteAnimal = this.deleteAnimal.bind(this)\n        // this.editFunction = this.editFunction.bind(this)\n    }\n    componentDidMount() {\n        this.setState({animals: this.props.animalList})\n    }\n\n    deleteAnimal(targetAnimal) {\n        const animals = this.state.animals.filter(animal => animal.id !== targetAnimal.id)\n        this.setState({animals})\n        localStorage.setItem(this.props.animalListKey, JSON.stringify(animals))\n    }\n    \n    editFunction = (targetAnimal) => {\n        let animals = this.state.animals\n        let index = animals.findIndex(animal => animal.id == targetAnimal.id)\n        animals[index] = targetAnimal\n        this.setState({ animals })\n        localStorage.setItem(this.props.animalListKey, JSON.stringify(animals))\n    }\n\n    render() {\n        let animalCards = <Row> No Animal on the list</Row>\n        \n        if (this.state.animals.length > 0) {\n             animalCards = this.state.animals.map(animal => (<AnimalCard \n                key={animal.id} \n                animal={animal} \n                deleteFunction = {this.deleteAnimal}\n                editFunction = {this.editFunction}\n                >\n                </AnimalCard>))\n        }\n\n        return(\n            <React.Fragment>\n                <Container>\n                    <Row className=\"justify-content-md-center\"><h1 className=\"list-animal-title\">Animal List</h1></Row>\n                    {animalCards}\n                </Container>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Animals","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport AppHeader from './AppHeader';\nimport AddAnimal from './AddAnimal'\nimport Animals from './Animals'\n\n\nclass App extends React.Component{\n  ANIMAL_LIST_KEY = \"AnimalList\"\n  constructor(){\n    super();\n    this.state = {\n        animals: [],\n    }\n    \n  }\n\n  componentDidMount() {\n    // localStorage.clear()\n    let animalListFromLocal = localStorage.getItem(this.ANIMAL_LIST_KEY)\n    if (animalListFromLocal) {\n      let animals = JSON.parse(animalListFromLocal)\n      this.setState({\n        animals: animals\n      })\n    } else {\n      this.initializeData()\n    }\n  }\n\n  initializeData() {\n    let initializedAnimalList = [\n      {\n        id: 1,\n        name: 'Hamster',\n        family: 'Cricetinae',\n        class: 'Mammal',\n        imageLink: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Pearl_Winter_White_Russian_Dwarf_Hamster_-_Front.jpg'\n      },\n      {\n        id: 2,\n        name: 'Lion',\n        family: 'Felidae',\n        class: 'Mammal',\n        imageLink: 'https://static.independent.co.uk/s3fs-public/thumbnails/image/2018/12/31/10/lion-face.jpg?w968h681'\n      },\n      {\n        id: 3,\n        name: \"Tuna\",\n        family: 'Scombridae',\n        class: 'Fish',\n        imageLink: 'https://upload.wikimedia.org/wikipedia/commons/1/18/Bluefin-big.jpg'\n      }\n    ]\n    this.setState({animals: initializedAnimalList})\n  } \n\n  addItem = item => {\n    const animals = [item, ...this.state.animals]\n    this.setState({ animals })\n    localStorage.setItem(this.ANIMAL_LIST_KEY, JSON.stringify(animals))\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router basename=\"/\">\n          <AppHeader/>\n          <div>\n            <Switch>\n                <Route path=\"/add\" component={() => <AddAnimal onSubmit={this.addItem} animalListKey={this.ANIMAL_LIST_KEY}/>}/>\n                <Route path=\"/\" component={() => <Animals animalList={this.state.animals} animalListKey={this.ANIMAL_LIST_KEY}/>}/>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}